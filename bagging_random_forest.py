#-------------------------------------------------------------------------
# AUTHOR: Michael Phu
# FILENAME: bagging_random_forest.py
# SPECIFICATION: This program compares the performance (accuracy) and runtime of three different methods (decision tree, ensemble, random forest
# in classifying transformed test samples representing handwritten digits. 
# FOR: CS 4210 - Assignment #3
# TIME SPENT: 1.5 Hours
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

#importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier
import csv 

dbTraining = []
dbTest = []
X_training = []
Y_training = []
classVotes = [] #this array will be used to count the votes of each classifier

#reading the training data from a csv file and populate dbTraining
with open('optdigits.tra', 'r') as csvfile:
         reader = csv.reader(csvfile)
         for row in reader:
            dbTraining.append(row)

#reading the test data from a csv file and populate dbTest
with open('optdigits.tes', 'r') as csvfile:
         reader = csv.reader(csvfile)
         for row in reader:
            dbTest.append(row)




#inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
for testSample in dbTest:
   classVotes.append([0,0,0,0,0,0,0,0,0,0])

print("Started my base and ensemble classifier ...")

for k in range(20): #we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample
   
  bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)
  #populate the values of X_training and y_training by using the bootstrapSample
  X_training.clear, Y_training.clear
  for row in bootstrapSample: 
   X_training.append(row[0:64])
   Y_training.append(row[64])

  #fitting the decision tree to the data
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=None) #we will use a single decision tree without pruning it
  clf = clf.fit(X_training, Y_training)
  
  right,wrong = 0,0
  for i, testSample in enumerate(dbTest):

      # make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
      # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
      # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
      # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
      # this array will consolidate the votes of all classifier for all test samples
      class_predicted = clf.predict([testSample[0:64]])[0]
      classVotes[i][int(class_predicted)] += 1

      if k == 0: #for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
         if int(class_predicted) == int(testSample[64:65][0]):
            right += 1
         else:
            wrong += 1
  
  if k == 0: # for only the first base classifier, print its accuracy here
     accuracy = right / (right + wrong)
     print("Finished my base classifier (fast but relatively low accuracy) ...")
     print("My base classifier accuracy: " + str(accuracy))
     print("")

#now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
right,wrong = 0,0
for ensembleRow,trueClass in zip(classVotes,dbTest):
   curMax,voteClass = 0,0
   for i,num in enumerate(ensembleRow):
      if num > curMax: 
         curMax = num
         voteClass = i 
   if voteClass == int(trueClass[64]): 
      right += 1
   else:
      wrong += 1 

#printing the ensemble accuracy here
accuracy = right / (right + wrong)
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")

#Create a Random Forest Classifier
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
X_training.clear, Y_training.clear 
for row in dbTraining:
   X_training.append(row[0:64])
   Y_training.append(row[64])
clf.fit(X_training,Y_training)

#make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
right,wrong = 0,0 
for row in dbTest:
   class_predicted = clf.predict([row[0:64]])[0]

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
   if int(class_predicted) == int(row[64]):
      right += 1
   else:
      wrong += 1

#printing Random Forest accuracy here
accuracy = right / (right + wrong)
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
